type User {
  userId: String!
  foodDiary: [FoodDiary] @relation
  fitnessPlan: [FitPlan] @relation
  userData: [UserInputData] @relation
  foodFeedback: String
  currentSession: String
  subscriptionType: String!
}

type FoodDiary {
  userId: User!
  type: String!
  time: String!
  details: String
}

type FitPlan {
  userId: User!
  sessionTitle: String!
  shortTitle: String!
  rating: Int
  notes: String
  cardInfo: [CardInfo]!
}

type CardInfo @embedded{
  cardTitle: String!
  listOfActivities: [Activity]!
}

type Activity @embedded {
  userInputDataId: [Int]
  datum: [String]
  units: [String]
  primary: String!
  secondary: String
  video: String
}

type UserInputData {
  userId: User!
  name: String!
  customId: Int!
  inputDataUnit: String!
  details: String!
  inputtedData: [UserData]
}

type UserData @embedded {
  sessionId: String!
  shortTitle: String!
  datum: String!
}

type Query {
  findId(userId: String!): User!
  findUserInput(customId: Int!): UserInputData
  allUsers: [User!]
}