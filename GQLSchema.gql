type User {
  userId: String!
  foodDiary: [FoodDiary] @relation
  fitnessPlan: [FitPlan] @relation
}

type FoodDiary {
  userId: User!
  type: String!
  time: Int!
  details: String
}

type FitPlan {
  userId: User!
  isCurrent: Boolean!
  sessionTitle: String!
  shortTitle: String!
  cardInfo: [CardInfo] @relation(name: "FitPlan-Card-Link")
}

type CardInfo {
  fitPlanId: [FitPlan]! @relation(name: "FitPlan-Card-Link")
  cardTitle: String!
  listOfActivities: [Activity]! @relation(name: "Card-Activity-Link")
}

type UserInputData {
  userId: User!
  inputDataTypes: [String]
  ActivityId: [Activity]! @relation(name: "Input-Activity-Link")
  Data: [UserData]
}

type Activity {
  cardId: [CardInfo]! @relation(name: "Card-Activity-Link")
  userInputDataId: UserInputData @relation(name: "Input-Activity-Link")
  primary: String!
  secondary: String
  video: String
}

type UserData @embedded {
  fitPlanId: FitPlan
  isSubmitted: Boolean
  unit: String
  datum: Float
}

type Query {
  findId(userId: String!): User!
  allUsers: [User!]
}